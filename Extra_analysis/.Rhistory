ext_order=ggplot(Final2)+geom_boxplot(aes(y=porcDeadTot,x=role,fill=Treat))+
scale_fill_manual(values=c("#a69880", "cornflowerblue"))+
scale_x_discrete(name="Topological role")+
scale_y_continuous(name = "Percentage of extinct species")+
theme(panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line (colour = "black",linetype = "solid", size = 1.4 ),
axis.title = element_text(size= 15),
axis.ticks = element_line(colour = "black", size = 1.4),
axis.text = element_text (colour = "black", size = 14 ),
legend.background = element_blank(),
legend.key = element_rect(colour = "white", fill = NA))
ext_order
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
# Load Ri values to assign of each species in each network
tdisp <- read.csv("traits_frug.csv", sep = ";")
tpol<- read.csv("traits_pol.csv", sep = ",")
tplants_pol<- read.csv("traits_plants_pol_2.csv")
#-----------------------------------------------------------------------------------------------------------------
########### 1. Estimation of the propagation of disturbances in networks controlled by size (NI treatment)
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
# Load Ri values to assign of each species in each network
tdisp <- read.csv("traits_frug.csv", sep = ";")
tpol<- read.csv("traits_pol.csv", sep = ",")
########### 1. Estimation of the propagation of disturbances in networks controlled by size (NI treatment)
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
# Load Ri values to assign of each species in each network
tdisp <- read.csv("traits_frug.csv", sep = ";")
tpol<- read.csv("traits_pol.csv", sep = ",")
tplants_pol<- read.csv("traits_plants_pol_2.csv")
tplants_disp<- read.csv("traits_plants_disp_2.csv")
tpol %>% arrange(Species_Ref) #order the pollinators in the R list according alphabetic order
# List of roles to assign of each species
sprole <- read.csv("/Users/agustin/Desktop/Papers/Paper_multicapa/Matrices_consecos/ISRAEL/Analisis_pooled/Modularity/Modularity_sproles/Change_sprole/super_list_treat.csv", sep=",",row.names=1)
#loops
Final=data.frame()
for(m in res){
###we assign the R for each species in each simulated matrix --
#plants_pollinators
plant.common=colnames(m)[colnames(m)%in%tplants_pol[,1]]
Rplants_pol<- tplants_pol %>%
filter(Plant_name%in%plant.common)
rplants_pol<- Rplants_pol[,5]
#plants_dispersers
plant.common=colnames(m)[colnames(m)%in%tplants_disp[,1]]
Rplants_disp<- tplants_disp %>%
filter(Plant_name%in%plant.common)
rplants_disp<- Rplants_disp[,4]
#pollinators
pol.common = rownames(m)[rownames(m)%in%tpol[,2]]
Rpol<-tpol %>%
filter(Species_Ref%in%pol.common) %>%
arrange(Species_Ref)
rpol<-Rpol[,3]
#dispersers
disp.common=row.names(m)[row.names(m)%in%tdisp[,1]]
Rdisp<- tdisp %>%
filter(Seeddisp_name%in%disp.common)
rdisp<-Rdisp[,7]
ndisp= length(rdisp)
npol= length(rpol)
nplants=ncol(m)
nanim= nrow(m)
ntot=nplants+npol+ndisp #Total number of nodes
pol_indx=1:npol
disp_indx=(npol+1):(ndisp+npol)
####################
####  Scenarios ####
####################
# Removing species
# a. random plants
nsims_p = nplants
PL.degree=numeric(nsims_p)
PL.dead.plants=numeric(nsims_p)
PL.dead.pols=numeric(nsims_p)
PL.dead.disp=numeric(nsims_p)
set.seed(99999)
bye.plants=1:nplants#
for (i in 1:nsims_p){#Call the function Stochastic coextinction model
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='plant',target=bye.plants[i],return.matrix=F)
PL.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
PL.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
PL.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
PL.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
#b. seed dispersers
nsims_d = length(disp_indx)
DP.degree=numeric(nsims_d)
DP.dead.plants=numeric(nsims_d)
DP.dead.pols=numeric(nsims_d)
DP.dead.disp=numeric(nsims_d)
set.seed(9999)
bye.disp=disp_indx
for (i in 1:nsims_d){
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='disperser',target=bye.disp[i],return.matrix=F)
DP.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
DP.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
DP.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
DP.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
#c. pollinators
nsims_pol = npol
PO.degree=numeric(nsims_pol)
PO.dead.plants=numeric(nsims_pol)
PO.dead.pols=numeric(nsims_pol)
PO.dead.disp=numeric(nsims_pol)
set.seed(99999)
bye.pol= pol_indx
for (i in 1:nsims_pol)
{
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='pollinator',target=bye.pol[i],return.matrix=F)
PO.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
PO.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
PO.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
PO.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
dead.plants=c(PL.dead.plants,PO.dead.plants,DP.dead.plants)
dead.disps=c(PL.dead.disp,PO.dead.disp,DP.dead.disp)
dead.pols=c(PL.dead.pols,PO.dead.pols,DP.dead.pols)
degrees=c(PL.degree,PO.degree,DP.degree)
initial.random=c(rep('Plant',nsims_p),rep('Pol',nsims_pol),rep('Disp',nsims_d))
Species_ID= c(colnames(m),rownames(m))
Results=data.frame(Species_ID,initial.random,dead.plants,dead.disps,dead.pols,degrees)
Results=Results %>%
mutate(porcDeadTot= ((dead.plants+dead.disps+dead.pols)/ntot)*100, porcDeadPlants=(dead.plants/nplants)*100,
porcDeadDisp=(dead.disps/ndisp)*100,porcDeadPols=(dead.pols/npol)*100) %>%
arrange(Species_ID)
#assign the species role to node id
roles<- sprole %>%
filter(Treat == "NI") %>%
group_by(node_id)%>%
slice(1) %>%
select(node_id,role)
roles_m<- roles %>%
filter(node_id%in%Results$Species_ID) %>%
select(role)
Results_2<-cbind(Results,role = roles_m$role)
Final= rbind(Final,Results_2)
}
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
# Load Ri values to assign of each species in each network
tdisp <- read.csv("traits_frug.csv", sep = ";")
tpol<- read.csv("traits_pol.csv", sep = ",")
tplants_pol<- read.csv("traits_plants_pol_2.csv")
tplants_disp<- read.csv("traits_plants_disp_2.csv")
tpol %>% arrange(Species_Ref) #order the pollinators in the R list according alphabetic order
# List of roles to assign of each species
sprole <- read.csv("/Users/agustin/Desktop/Papers/Paper_multicapa/Matrices_consecos/ISRAEL/Analisis_pooled/Modularity/Modularity_sproles/Change_sprole/super_list_treat.csv", sep=",",row.names=1)
#loops
Final=data.frame()
for(m in res){
###we assign the R for each species in each simulated matrix --
#plants_pollinators
plant.common=colnames(m)[colnames(m)%in%tplants_pol[,1]]
Rplants_pol<- tplants_pol %>%
filter(Plant_name%in%plant.common)
rplants_pol<- Rplants_pol[,5]
#plants_dispersers
plant.common=colnames(m)[colnames(m)%in%tplants_disp[,1]]
Rplants_disp<- tplants_disp %>%
filter(Plant_name%in%plant.common)
rplants_disp<- Rplants_disp[,4]
#pollinators
pol.common = rownames(m)[rownames(m)%in%tpol[,2]]
Rpol<-tpol %>%
filter(Species_Ref%in%pol.common) %>%
arrange(Species_Ref)
rpol<-Rpol[,3]
#dispersers
disp.common=row.names(m)[row.names(m)%in%tdisp[,1]]
Rdisp<- tdisp %>%
filter(Seeddisp_name%in%disp.common)
rdisp<-Rdisp[,7]
ndisp= length(rdisp)
npol= length(rpol)
nplants=ncol(m)
nanim= nrow(m)
ntot=nplants+npol+ndisp #Total number of nodes
pol_indx=1:npol
disp_indx=(npol+1):(ndisp+npol)
####################
####  Scenarios ####
####################
# Removing species
# a. random plants
nsims_p = nplants
PL.degree=numeric(nsims_p)
PL.dead.plants=numeric(nsims_p)
PL.dead.pols=numeric(nsims_p)
PL.dead.disp=numeric(nsims_p)
set.seed(99999)
bye.plants=1:nplants#
for (i in 1:nsims_p){#Call the function Stochastic coextinction model
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='plant',target=bye.plants[i],return.matrix=F)
PL.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
PL.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
PL.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
PL.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
#b. seed dispersers
nsims_d = length(disp_indx)
DP.degree=numeric(nsims_d)
DP.dead.plants=numeric(nsims_d)
DP.dead.pols=numeric(nsims_d)
DP.dead.disp=numeric(nsims_d)
set.seed(9999)
bye.disp=disp_indx
for (i in 1:nsims_d){
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='disperser',target=bye.disp[i],return.matrix=F)
DP.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
DP.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
DP.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
DP.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
#c. pollinators
nsims_pol = npol
PO.degree=numeric(nsims_pol)
PO.dead.plants=numeric(nsims_pol)
PO.dead.pols=numeric(nsims_pol)
PO.dead.disp=numeric(nsims_pol)
set.seed(99999)
bye.pol= pol_indx
for (i in 1:nsims_pol)
{
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=NULL, deadPols=NULL, deadDisps=NULL,targetGuild='pollinator',target=bye.pol[i],return.matrix=F)
PO.degree[i]=max(NC$cascade_data$degree)
if(is.data.frame(NC$plant_species_data)) {
PO.dead.plants[i]=length(NC$plant_species_data$lost_plants)
}
if (is.data.frame(NC$pol_species_data)) {
PO.dead.pols[i]=length(NC$pol_species_data$lost_pols)
}
if (is.data.frame(NC$disp_species_data)){
PO.dead.disp[i]=length(NC$disp_species_data$lost_disps)
}
}
dead.plants=c(PL.dead.plants,PO.dead.plants,DP.dead.plants)
dead.disps=c(PL.dead.disp,PO.dead.disp,DP.dead.disp)
dead.pols=c(PL.dead.pols,PO.dead.pols,DP.dead.pols)
degrees=c(PL.degree,PO.degree,DP.degree)
initial.random=c(rep('Plant',nsims_p),rep('Pol',nsims_pol),rep('Disp',nsims_d))
Species_ID= c(colnames(m),rownames(m))
Results=data.frame(Species_ID,initial.random,dead.plants,dead.disps,dead.pols,degrees)
Results=Results %>%
mutate(porcDeadTot= ((dead.plants+dead.disps+dead.pols)/ntot)*100, porcDeadPlants=(dead.plants/nplants)*100,
porcDeadDisp=(dead.disps/ndisp)*100,porcDeadPols=(dead.pols/npol)*100) %>%
arrange(Species_ID)
#assign the species role to node id
roles<- sprole %>%
filter(Treat == "NI") %>%
group_by(node_id)%>%
slice(1) %>%
select(node_id,role)
roles_m<- roles %>%
filter(node_id%in%Results$Species_ID) %>%
select(role)
Results_2<-cbind(Results,role = roles_m$role)
Final= rbind(Final,Results_2)
}
Prop_NI_size = Final #Propagation of 300 networks controlled by size
#######################################################
####### Create data frame and summarize results #######
#######################################################
NI<-Prop_NI_size%>%
group_by(Species_ID, initial.random,role) %>%
summarise(
porc_dead_tot_mean = mean(porcDeadTot),
porc_dead_plants_mean = mean(porcDeadPlants),
porc_dead_disp_mean = mean(porcDeadDisp),
porc_dead_pol_mean = mean(porcDeadPols))
NI_c<-cbind(Treat = rep("NI", nrow(NI)),NI)
names(NI_c)<- c("Treat","Species_ID","initial.random","role","porcDeadTot","porcDeadPlants","porcDeadDisp","porcDeadPols")
#upload matrix of NI without controlling for size
NI_nc<-read.csv()#should upload the file containing the propagation in NI, generated in the code titled "Extinction_Propagation"
library(tidyverse)
library(dplyr)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
source("Simulation_control_size.R") #simulated networks controlled by size
# Load Ri values to assign of each species in each network
tdisp <- read.csv("traits_frug.csv", sep = ";")
tpol<- read.csv("traits_pol.csv", sep = ",")
tplants_pol<- read.csv("traits_plants_pol_2.csv")
tplants_disp<- read.csv("traits_plants_disp_2.csv")
tpol %>% arrange(Species_Ref) #order the pollinators in the R list according alphabetic order
# List of roles to assign of each species
sprole <- read.csv("/Users/agustin/Desktop/Papers/Paper_multicapa/Matrices_consecos/ISRAEL/Analisis_pooled/Modularity/Modularity_sproles/Change_sprole/super_list_treat.csv", sep=",",row.names=1)
#loops
Final=data.frame()
for(m in res){
#we assign the R for each species in each matrix --
#plants_pols
plant.common=colnames(m)[colnames(m)%in%tplants_pol[,1]]
Rplants_pol<- tplants_pol %>%
filter(Plant_name%in%plant.common)
rplants_pol<- Rplants_pol[,5]
#plants_disps
plant.common=colnames(m)[colnames(m)%in%tplants_disp[,1]]
Rplants_disp<- tplants_disp %>%
filter(Plant_name%in%plant.common)
rplants_disp<- Rplants_disp[,4]
#pollinators
pol.common = rownames(m)[rownames(m)%in%tpol[,2]]
Rpol<-tpol %>%
filter(Species_Ref%in%pol.common) %>%
arrange(Species_Ref)
rpol<-Rpol[,3]
#seed dispersers
disp.common=row.names(m)[row.names(m)%in%tdisp[,1]]
Rdisp<- tdisp %>%
filter(Seeddisp_name%in%disp.common)
rdisp<-Rdisp[,7]
ndisp= length(rdisp)
npol= length(rpol)
nplants=ncol(m)
nanim= nrow(m)
ntot=nplants+npol+ndisp
pol_indx=1:npol
disp_indx=(npol+1):(ndisp+npol)
plants_names<-colnames(m)
pol_names<-rownames(m[1:npol,])
disp_names <- rownames(m[disp_indx,])
#assign the species role to nodes
roles_NI<- sprole %>%
filter(Treat == "NI") %>%
group_by(node_id)%>%
slice(1) %>%
select(role)
roles_plants<- roles_NI %>%
filter(node_id%in%plants_names) %>%
select(role)
roles_pol<- roles_NI %>%
filter(node_id%in%pol_names) %>%
select(role)
roles_disp<- roles_NI%>%
filter(node_id%in%disp_names) %>%
select(role)
roles_m<-rbind(roles_plants,roles_pol,roles_disp)
#assign a value (1:4) to each role classification
n.roles <- roles_m %>%
mutate(role, role = case_when (role == "network hub"~ 4,
role == "module hub"~ 3,
role == "connector"~ 2,
role == "peripheral"~ 1))
n.roles <- n.roles$role
####################
####  Scenarios ####
####################
# a) Random Species
# b) Most to least
# c) least to most
scenario=c('random','MtoL','LtoM') #scenarios a,b and c
Scenario=c()
AUC=matrix(NA,ncol=3,nrow=1)
sp.rm=c()
sp.present=c()
for (j in 1:3)
{
if (scenario[j]=='random')
{
bye.s=sample(1:length(n.roles),size=nsims, replace = TRUE)  #100 sps al azar del total.
}
if(scenario[j]=='MtoL')
{
ind.max = which(n.roles==max(n.roles))#species with the max classification
bye.s=sample(ind.max,nsims, replace =T)
}
if(scenario[j]=='LtoM')
{
ind.min = which(n.roles==min(n.roles))#species with the max classification
bye.s=sample(ind.min,nsims, replace =T)
}
all.dead=1# el 1 indica la primer sp que sacamos
deadPlants=NULL
deadPols=NULL
deadDisps=NULL
n.remove=c()
n.dead=c()
deads=NULL
while(all.dead<(ntot-1))# if at least one species is alived
{
#next to remove
if (scenario[j]=='random')
{
quienes=(1:ntot)[!(1:ntot)%in% deads]#quienes siguen vivas
next.rem=sample(quienes,1)#elegimos una al azar de las vivas para removerla
}
if(scenario[j]=='MtoL')
{
n.rolesNA[deads]=-999# reeplace the classification of the dead species for "-999", so the algorithm doesn't chose the dead species to remove.
ind.max = which(n.rolesNA==max(n.rolesNA))#species with the max classification
next.rem=ind.max[sample(length(ind.max),size=1)]
}
if(scenario[j]=='LtoM')
{
n.rolesNA[deads]=9999## reeplace the clasification of the dead species for "9999", so the , so the algorithm doesn't chose the dead species to remove.
ind.min = which(n.rolesNA==min(n.rolesNA))#species with the max classification
next.rem=ind.min[sample(length(ind.min),size=1)]
}
if(next.rem>(length(rpol)+nplants))#si la especie a remover esta en el pos 133 o mas (dispersores en el vector n.roles)
{tg="disperser"#entonces son los dispersores
next.rem.fc = next.rem-nplants
}#cuyo nodo seria del 96 al 99 (coincide con disp_indx para la funcion  nes cadcade multi)
if(nplants < next.rem & next.rem <= (length(rpol)+nplants))#si esta en la pos 38-132(inclusive)
{tg="pollinator"#se saca un polinizador
next.rem.fc = next.rem-nplants #cuyo nodo en la funcion seria del 1 al 95
}
if(nplants >= next.rem)
{ tg="plant"
next.rem.fc = next.rem
}#nodo del 1 al 37 para pol
n.rolesNA=n.roles  #lo reinicia para el siguiente loop pero al tener dead actualizado
NC=netcascade_multi(as.matrix(m),rplants_disp,rplants_pol, rpol, rdisp,deadPlants=deadPlants, deadPols=deadPols, deadDisps=deadDisps, targetGuild=tg ,target=next.rem.fc,return.matrix=T)
deadPlants=c(deadPlants,NC$lost_plants)#deadPlants represens the accumulated dead plants, while lost plants refers to the plant species lost in the current step
deadPols=c(deadPols,NC$lost_pols)#les sumamos el nplants para que coincidan con las posiciones del n.roles)
deadDisps=c(deadDisps,NC$lost_disps)
all.dead=sum(length(deadPlants),length(deadPols),length(deadDisps))#num total sps muertas
deads=c(deadPols+nplants,deadDisps+nplants,deadPlants)#les sumamos el nplants para que coincidan con las posiciones del n.roles)
n.remove=c(n.remove,1)#n remov son las especies que removimos en cada simulacion (el 1 es pq eliminamos de a 1)
n.dead=c(n.dead,sum(length(NC$lost_plants),length(NC$lost_pols),length(NC$lost_disps)))# n.dead son los murtos que se van acumulando con los loops y el resto son los muertos que se sumane n cada simulacion
}
sp.rms=c(0,cumsum(n.remove))/max(cumsum(n.remove))#Prop of removed species per simulation. El 0 indica que arranca con ninguna sp removida,
#esto el eje x termine en 1 y sea comparable
sp.presents=c(ntot,sum(n.dead)-cumsum(n.dead))/ntot #Prop of alive species after each removal. El ntotal indica que tenemos todas las sps al princpio
#
Scenario=c(Scenario,rep(scenario[j],length(sp.rms)))
AUC[j]=auc(sp.rms,sp.presents)#calculate the area under the curve
sp.rm=c(sp.rm,sp.rms)#todas los sp.rms de todas las simulaciones juntas
sp.present=c(sp.present,sp.presents)# idem
}
Final = rbind(Final,AUC)
}
Rob_NI_size = Final #Robustness of 300 networks controlled by size
colnames(Rob_NI_size)<-c("random","MtoL","LtoM")
NI_c2<- Rob_NI_size %>%
gather(key = "Scenario", value = "Auc")
View(NI_c2)
aucplot=ggplot(Final)+geom_boxplot(aes(y=Auc,x=Scenario,fill=Treat))+
scale_fill_manual(values=c("#a69880", "cornflowerblue"))+
scale_x_discrete(name="Order of species removal")+
scale_y_continuous(name = "Area under the curve (AUC)")+
theme(panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line (colour = "black",linetype = "solid", size = 1.4 ),
axis.title = element_text(size= 15),
axis.ticks = element_line(colour = "black", size = 1.4),
axis.text = element_text (colour = "black", size = 14 ),
legend.background = element_blank(),
legend.key = element_rect(colour = "white", fill = NA))
aucplot
Rob_NI_size = Final #Robustness of 300 networks controlled by size
colnames(Rob_NI_size)<-c("random","MtoL","LtoM")
NI_c2<- Rob_NI_size %>%
gather(key = "Scenario", value = "Auc")
aucplot=ggplot(NI_c2)+geom_boxplot(aes(y=Auc,x=Scenario,fill=Treat))+
scale_fill_manual(values=c("#a69880", "cornflowerblue"))+
scale_x_discrete(name="Order of species removal")+
scale_y_continuous(name = "Area under the curve (AUC)")+
theme(panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line (colour = "black",linetype = "solid", size = 1.4 ),
axis.title = element_text(size= 15),
axis.ticks = element_line(colour = "black", size = 1.4),
axis.text = element_text (colour = "black", size = 14 ),
legend.background = element_blank(),
legend.key = element_rect(colour = "white", fill = NA))
aucplot
