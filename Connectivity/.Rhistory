####################### 1) WE CALCULATED THE CONNECTIVITY OF EACH SPECIES CONNECTING BOTH LAYERS
############## 2) WE COMPARED THE NUMBER OF PATH, PROPORTION OF PATHS AND CONNECTIVITY PER SPECIES
library(dplyr)
library(vegan)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
##############################NI TREATMENT#########################
#upload matrix
NI_disp <- read.csv("/Users/agustin/Desktop/Papers/Paper_multicapa/Matrices_consecos/ISRAEL/Matrices/Combinado/NI_disp.csv", sep=",",row.names=1)
NI_pol<- read.csv("/Users/agustin/Desktop/Papers/Paper_multicapa/Matrices_consecos/ISRAEL/Matrices/Combinado/NI_pol.csv", sep=",",row.names=1)
Npol<-NI_pol
Ndisp<-NI_disp
#check
Ndisp=Ndisp[apply(Ndisp[,], 1, function(x) !all(x==0)),]
Npol=Npol[apply(Npol[,], 1, function(x) !all(x==0)),]
NpolE=empty(Npol)
NdispE=empty(Ndisp)
#To prop
PropNetPol=ToProp(Npol)
PropNetDisp=ToProp(Ndisp)
###we created multilayer edges
files=CreateFiles(PropNetDisp,PropNetPol)
Edges=files$Edges.info
Nodes=files$Nodes.info
Layers=files$Layers.info
#We calculated connectivity per species with the function
plantesName= colnames(Ndisp)#vector containing plants
wp=which(plantesName %in% Nodes$name_node)
Edges2=Edges %>% select(node_from,layer_from,node_to,layer_to,weight)
chau=which(Edges2$layer_from!=Edges2$layer_to)
Edges.new=Edges2[-chau,]#we removed the interlayer edges because the function already do that
con_sp=Connectivityindex(wp,edges.list=Edges.new)
conn_sp_NI<-cbind(Treat = rep("NI",length(plantesName)),
plantesName,con_sp)
conn_sp_NI<-as.data.frame(conn_sp_NI)
conn_sp_NI[is.na(conn_sp_NI)]<-0
conn_sp_NI$N_pol<- as.integer(conn_sp_NI$N_pol)
conn_sp_NI$N_disp<- as.integer(conn_sp_NI$N_disp)
conn_sp_NI$P<- as.integer(conn_sp_NI$P)
#We calculated the proportion pollinator and seed disperser species interacting with the plants connecting layers
#and the degree of plant species
conn_sp_NI<-conn_sp_NI %>%
mutate(Prop_path = P / (nrow(NI_pol) * nrow(NI_disp)),
Prop_pol = N_pol / nrow(NI_pol),
Prop_disp = N_disp / nrow(NI_disp),
Degree = N_pol + N_disp)
View(conn_sp_NI)
# NI TREATMENT --
NI_disp <- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/NI_disp.csv", sep=",",row.names=1)
NI_pol<- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/NI_pol.csv", sep=",",row.names=1)
Npol<-NI_pol
Ndisp<-NI_disp
#check
Ndisp=Ndisp[apply(Ndisp[,], 1, function(x) !all(x==0)),]
Npol=Npol[apply(Npol[,], 1, function(x) !all(x==0)),]
NpolE=empty(Npol)
NdispE=empty(Ndisp)
#Call function to change the network' edges to proportions
PropNetPol=ToProp(Npol)
PropNetDisp=ToProp(Ndisp)
#Call function to create the multilayer edge list
files=CreateFiles(PropNetDisp,PropNetPol)
Edges=files$Edges.info
Nodes=files$Nodes.info
Layers=files$Layers.info
library(dplyr)
library(vegan)
source('/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Extra_Functions/Extrafunctions.R')
# NI TREATMENT --
NI_disp <- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/NI_disp.csv", sep=",",row.names=1)
NI_pol<- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/NI_pol.csv", sep=",",row.names=1)
Npol<-NI_pol
Ndisp<-NI_disp
#check
Ndisp=Ndisp[apply(Ndisp[,], 1, function(x) !all(x==0)),]
Npol=Npol[apply(Npol[,], 1, function(x) !all(x==0)),]
NpolE=empty(Npol)
NdispE=empty(Ndisp)
#Call function to change the network' edges to proportions
PropNetPol=ToProp(Npol)
PropNetDisp=ToProp(Ndisp)
#Call function to create the multilayer edge list
files=CreateFiles(PropNetDisp,PropNetPol)
Edges=files$Edges.info
Nodes=files$Nodes.info
Layers=files$Layers.info
##PROP
con_sp=Connectivityindex(wp,edges.list=Edges.new)
conn_sp_NI<-cbind(Treat = rep("NI",length(plantesName)), plantesName,con_sp)
conn_sp_NI<-as.data.frame(conn_sp_NI)
conn_sp_NI<- conn_sp_NI %>%
mutate (Connect= ifelse(P == 0, 0,1),
Prop_path = P / (nrow(NI_pol) * nrow(NI_disp) )) %>%
select(Treat,plantesName,Connect,Prop_path)
##PROP
con_sp=Connectivityindex(wp,edges.list=Edges.new)
conn_sp_NI<-cbind(Treat = rep("NI",length(plantesName)), plantesName,con_sp)
conn_sp_NI<-as.data.frame(conn_sp_NI)
conn_sp_NI[is.na(conn_sp_NI)]<-0
conn_sp_NI$N_pol<- as.integer(conn_sp_NI$N_pol)
conn_sp_NI$N_disp<- as.integer(conn_sp_NI$N_disp)
conn_sp_NI$P<- as.integer(conn_sp_NI$P)
conn_sp_NI<- conn_sp_NI %>%
mutate (Connect= ifelse(P == 0, 0,1),
Prop_path = P / (nrow(NI_pol) * nrow(NI_disp) )) %>%
select(Treat,plantesName,Connect,Prop_path)
View(conn_sp_NI)
View(conn_sp_NI)
View(conn_sp_NI)
##PROP
con_sp=Connectivityindex(wp,edges.list=Edges.new)
View(con_sp)
##PROP
con_sp=Connectivityindex(wp,edges.list=Edges.new)
conn_sp_NI<-cbind(Treat = rep("NI",length(plantesName)), plantesName,con_sp)
conn_sp_NI<-as.data.frame(conn_sp_NI)
conn_sp_NI[is.na(conn_sp_NI)]<-0
conn_sp_NI$N_pol<- as.integer(conn_sp_NI$N_pol)
conn_sp_NI$N_disp<- as.integer(conn_sp_NI$N_disp)
conn_sp_NI$P<- as.integer(conn_sp_NI$P)
conn_sp_NI<- conn_sp_NI %>%
mutate (Connect= ifelse(P == 0, 0,1),
Prop_path = P / (nrow(NI_pol) * nrow(NI_disp) )) %>%
select(Treat,plantesName,P,Connect,Prop_path)
View(conn_sp_NI)
View(conn_sp_NI)
# I TREATMENT --
I_disp <- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/I_disp.csv", sep=",",row.names=1)
I_pol <- read.csv("/Users/agustin/Documents/GitHub/Multilayer_Ecology-letters/Data/I_pol.csv", sep=";",row.names=1)
Npol<-I_pol
Ndisp<-I_disp
#check
Ndisp=Ndisp[apply(Ndisp[,], 1, function(x) !all(x==0)),]
Npol=Npol[apply(Npol[,], 1, function(x) !all(x==0)),]
NpolE=empty(Npol)
NdispE=empty(Ndisp)
#Call function to change the network' edges to proportions
PropNetPol=ToProp(Npol)
PropNetDisp=ToProp(Ndisp)
#Call function to create the network edge list
files=CreateFiles(PropNetDisp,PropNetPol)
Edges=files$Edges.info
Nodes=files$Nodes.info
Layers=files$Layers.info
#Call function to #DESCRIPTION
plantesName= colnames(Ndisp)
wp=which(plantesName %in% Nodes$name_node)
Edges2=Edges %>% select(node_from,layer_from,node_to,layer_to,weight)
chau=which(Edges2$layer_from!=Edges2$layer_to)
Edges.new=Edges2[-chau,]#Remove the interlayer edges from the edge lost because
con_sp=Connectivityindex(wp,edges.list=Edges.new) #call Connectivityindex function
con_sp=Connectivityindex(wp,edges.list=Edges.new) #call Connectivityindex function
conn_sp_I<-cbind(Treat = rep("I",length(plantesName)), plantesName,con_sp)
conn_sp_I<-as.data.frame(conn_sp_I)
conn_sp_I[is.na(conn_sp_I)]<-0
conn_sp_I$N_pol<- as.integer(conn_sp_I$N_pol)
conn_sp_I$N_disp<- as.integer(conn_sp_I$N_disp)
conn_sp_I$P<- as.integer(conn_sp_I$P)
conn_sp_I<- conn_sp_I %>%
mutate (Connect= ifelse(P == 0, 0,1), #Calculate presence of plant connecting layer
Prop_path = P / (nrow(I_pol) * nrow(I_disp) )) %>% #calculate proportion of paths per plant sp
select(Treat,plantesName,P,Connect,Prop_path)
View(conn_sp_I)
#final matrix
conn_sp<-rbind(conn_sp_NI,conn_sp_I)
View(con_sp)
View(conn_sp)
################## (2) ###############
library(tidyverse)
library(lme4)
library("stats4")
library("bbmle")
# test if presence of plants connecting layers change between treatments
m1<-glmer (Connect ~ Treat + ( 1| plantesName), family = binomial(link="logit"), data = conn_sp)
summary(m1)
#independence
E1_lme<-resid(m1, type= "deviance")
boxplot(E1_lme~prop$Treat, main="Tratamiento") #it's ok
boxplot(E1_lme~conn_sp$Treat, main="Tratamiento") #it's ok
# test if Number and prop of path per species connecting layer change between treatment--
conn_sp <-conn_sp%>%
filter(P>0)#filter only plants connecting layers
#Number of path per species
m1<- glmer.nb (P ~ Treat + ( 1| plantesName), data = conn_sp)
summary(m1) #we choose this model after applied AIC (compared also with poisson)
#overdispersion
overdisp_fun<- function(model) {
vpars<- function(m) {
nrow(m)*(nrow(m)+1)/2
}
model.df<- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
(rdf<- nrow(model@frame)-model.df)
rp<- residuals(model)
Pearson.chisq<- sum(rp^2)
prat<- Pearson.chisq/rdf
pval<- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE,log.p=TRUE)
c(chisq=Pearson.chisq,ratio=prat,p=exp(pval))
}
overdisp_fun(m1)
# test if presence of plants connecting layers change between treatments --
m1<-glmer (Connect ~ Treat + ( 1| plantesName), family = binomial(link="logit"), data = conn_sp)
summary(m1)
#Homogeneity
EM<-resid(m1, type= "deviance")
FM<-fitted(m1)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3) #da lindo
#Number of path per species
m1<- glmer.nb (P ~ Treat + ( 1| plantesName), data = conn_sp)
summary(m1)
#overdispersion
overdisp_fun<- function(model) {
vpars<- function(m) {
nrow(m)*(nrow(m)+1)/2
}
model.df<- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
(rdf<- nrow(model@frame)-model.df)
rp<- residuals(model)
Pearson.chisq<- sum(rp^2)
prat<- Pearson.chisq/rdf
pval<- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE,log.p=TRUE)
c(chisq=Pearson.chisq,ratio=prat,p=exp(pval))
}
overdisp_fun(m1)
#Homogeneity (residuals vs fitted values)
EM<-resid(m1, type= "deviance")
FM<-fitted(m1)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3) #da lindo
#Homogeneity (residuals vs fitted values)
EM<-resid(m1, type= "deviance")
FM<-fitted(m1)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#Number of path per species
m2<- glmer.nb (P ~ Treat + ( 1| plantesName), data = conn_sp)
summary(m1)
#Number of path per species
m2<- glmer.nb (P ~ Treat + ( 1| plantesName), data = conn_sp)
summary(m2)
#overdispersion
overdisp_fun<- function(model) {
vpars<- function(m) {
nrow(m)*(nrow(m)+1)/2
}
model.df<- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
(rdf<- nrow(model@frame)-model.df)
rp<- residuals(model)
Pearson.chisq<- sum(rp^2)
prat<- Pearson.chisq/rdf
pval<- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE,log.p=TRUE)
c(chisq=Pearson.chisq,ratio=prat,p=exp(pval))
}
overdisp_fun(m2)
#Homogeneity (residuals vs fitted values)
EM<-resid(m2, type= "deviance")
FM<-fitted(m2)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#Independence (residuals against treatment)
boxplot(EM~conn_sp$Treat, main="Tratamiento")
#final matrix
conn_sp<-rbind(conn_sp_NI,conn_sp_I)
# test if presence of plants connecting layers change between treatments --
m1<-glmer (Connect ~ Treat + ( 1| plantesName), family = binomial(link="logit"), data = conn_sp)
summary(m1)
#Homogeneity
EM<-resid(m1, type= "deviance")
FM<-fitted(m1)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#independence
E1_lme<-resid(m1, type= "deviance")
boxplot(E1_lme~conn_sp$Treat, main="Tratamiento")
# test if Number and prop of path per species connecting layer change between treatment--
conn_sp <-conn_sp%>%
filter(P>0)#filter only plants connecting layers
#Number of path per species
m2<- glmer.nb (P ~ Treat + ( 1| plantesName), data = conn_sp)
summary(m2)
#overdispersion
overdisp_fun<- function(model) {
vpars<- function(m) {
nrow(m)*(nrow(m)+1)/2
}
model.df<- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
(rdf<- nrow(model@frame)-model.df)
rp<- residuals(model)
Pearson.chisq<- sum(rp^2)
prat<- Pearson.chisq/rdf
pval<- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE,log.p=TRUE)
c(chisq=Pearson.chisq,ratio=prat,p=exp(pval))
}
overdisp_fun(m2)
#Homogeneity (residuals vs fitted values)
EM<-resid(m2, type= "deviance")
FM<-fitted(m2)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3)
#Independence (residuals against treatment)
boxplot(EM~conn_sp$Treat, main="Tratamiento")
#Boxplot
conn_sp$Treat <- factor(conn_sp$Treat,
levels = c('NI','I'),ordered = TRUE)
ggplot(data = conn_sp, mapping = aes(x = Treat, y = P, fill=Treat), lwd= 1.2) + labs(y="Number of path per species")+
geom_boxplot()+ scale_fill_manual(values=c("cornflowerblue","orange2"))+
theme(panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line (colour = "black",linetype = "solid", size = 1 ),
axis.title = element_text(size= 25),
axis.text= element_text(size= 18, colour = "black"),
legend.title = element_text(size = 15),
legend.text =  element_text(size= 5),
legend.key.size = unit(2, 'cm'),
strip.background = element_rect(colour="white", fill="white",
size=0.5, linetype="dashed"))
#Prop of paths per species
library(glmmTMB)
m3<-glmmTMB(Prop_path~ Treat + ( 1| plantesName),beta_family(link = "logit"), data = conn_sp)
summary(m3)
#Homogeneity
EM<-resid(m3, type= "pearson")
FM<-fitted(m3)
plot(x=FM, y=EM, xlab = "Ajustados", ylab = "Residuales normalizados")
abline(0,0, col="red", lwd= 3) #da lindo
#Independence (residuals against treatment)
boxplot(EM~conn_sp$Treat, main="Tratamiento")
